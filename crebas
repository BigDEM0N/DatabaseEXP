/*==============================================================*/
/* DBMS name:      SAP SQL Anywhere 17                          */
/* Created on:     2023/10/9 21:24:33                           */
/*==============================================================*/


drop trigger if exists State_BEFORE_UPDATE;

drop procedure if exists order_of_user;

if exists(select 1 from sys.sysforeignkey where role='FK_CART_GOOD_CART_GOOD') then
    alter table cart
       delete foreign key FK_CART_GOOD_CART_GOOD
end if;

if exists(select 1 from sys.sysforeignkey where role='FK_GOOD_GOOD_CATE_CATEGORY') then
    alter table good
       delete foreign key FK_GOOD_GOOD_CATE_CATEGORY
end if;

if exists(select 1 from sys.sysforeignkey where role='FK_GOOD_USER_GOOD_USER') then
    alter table good
       delete foreign key FK_GOOD_USER_GOOD_USER
end if;

if exists(select 1 from sys.sysforeignkey where role='FK_LIKE_GOOD_LIKE_GOOD') then
    alter table "like"
       delete foreign key FK_LIKE_GOOD_LIKE_GOOD
end if;

if exists(select 1 from sys.sysforeignkey where role='FK_MSG_MSG_ORDER_ORDER') then
    alter table msg
       delete foreign key FK_MSG_MSG_ORDER_ORDER
end if;

if exists(select 1 from sys.sysforeignkey where role='FK_MSG_USER_MSG_USER') then
    alter table msg
       delete foreign key FK_MSG_USER_MSG_USER
end if;

if exists(select 1 from sys.sysforeignkey where role='FK_ORDER_GOOD_ORDE_GOOD') then
    alter table "order"
       delete foreign key FK_ORDER_GOOD_ORDE_GOOD
end if;

if exists(select 1 from sys.sysforeignkey where role='FK_ORDER_USER_ORDE_USER') then
    alter table "order"
       delete foreign key FK_ORDER_USER_ORDE_USER
end if;

if exists(select 1 from sys.sysforeignkey where role='FK_USER_USER_LOCA_LOCATION') then
    alter table "user"
       delete foreign key FK_USER_USER_LOCA_LOCATION
end if;

drop
table if exists viewUser;

drop
table if exists viewGoods;

drop index if exists admin.admin_PK;

drop table if exists admin;

drop index if exists cart.good_cart_FK;

drop index if exists cart.cart_PK;

drop table if exists cart;

drop index if exists category.category_PK;

drop table if exists category;

drop index if exists good.good_category_FK;

drop index if exists good.user_good_FK;

drop index if exists good.good_PK;

drop table if exists good;

drop index if exists "like".good_like_FK;

drop index if exists "like".like_PK;

drop table if exists "like";

drop index if exists location.location_PK;

drop table if exists location;

drop index if exists msg.msg_order_FK;

drop index if exists msg.user_msg_FK;

drop index if exists msg.msg_PK;

drop table if exists msg;

drop index if exists "order".user_order_FK;

drop index if exists "order".good_order_FK;

drop index if exists "order".order_PK;

drop table if exists "order";

drop index if exists "user".user_location_FK;

drop index if exists "user".user_PK;

drop table if exists "user";

/*==============================================================*/
/* Table: admin                                                 */
/*==============================================================*/
create or replace table admin 
(
   a_username           varchar(1024)                  not null,
   a_password           varchar(1024)                  not null,
   a_id                 integer                        not null,
   constraint PK_ADMIN primary key clustered (a_id)
);

/*==============================================================*/
/* Index: admin_PK                                              */
/*==============================================================*/
create unique clustered index admin_PK on admin (
a_id ASC
);

/*==============================================================*/
/* Table: cart                                                  */
/*==============================================================*/
create or replace table cart 
(
   ct_id                integer                        not null,
   g_id                 integer                        null,
   ct_addTime           timestamp                      not null,
   constraint PK_CART primary key clustered (ct_id)
);

/*==============================================================*/
/* Index: cart_PK                                               */
/*==============================================================*/
create unique clustered index cart_PK on cart (
ct_id ASC
);

/*==============================================================*/
/* Index: good_cart_FK                                          */
/*==============================================================*/
create index good_cart_FK on cart (
g_id ASC
);

/*==============================================================*/
/* Table: category                                              */
/*==============================================================*/
create or replace table category 
(
   c_id                 integer                        not null,
   c_name               varchar(1024)                  not null,
   constraint PK_CATEGORY primary key clustered (c_id)
);

/*==============================================================*/
/* Index: category_PK                                           */
/*==============================================================*/
create unique clustered index category_PK on category (
c_id ASC
);

/*==============================================================*/
/* Table: good                                                  */
/*==============================================================*/
create or replace table good 
(
   g_name               varchar(1024)                  not null,
   g_id                 integer                        not null,
   c_id                 integer                        null,
   u_id                 integer                        null,
   g_price              float                          not null,
   g_description        varchar(1024)                  null,
   g_purchaseDate       date                           not null,
   g_postTime           timestamp                      not null,
   g_state              varchar(1024)                  not null,
   g_old                varchar(1024)                  not null,
   constraint PK_GOOD primary key clustered (g_id)
);

/*==============================================================*/
/* Index: good_PK                                               */
/*==============================================================*/
create unique clustered index good_PK on good (
g_id ASC
);

/*==============================================================*/
/* Index: user_good_FK                                          */
/*==============================================================*/
create index user_good_FK on good (
u_id ASC
);

/*==============================================================*/
/* Index: good_category_FK                                      */
/*==============================================================*/
create index good_category_FK on good (
c_id ASC
);

/*==============================================================*/
/* Table: "like"                                                */
/*==============================================================*/
create or replace table "like" 
(
   lk_id                integer                        not null,
   g_id                 integer                        null,
   lk_addTime           timestamp                      null,
   constraint PK_LIKE primary key clustered (lk_id)
);

/*==============================================================*/
/* Index: like_PK                                               */
/*==============================================================*/
create unique clustered index like_PK on "like" (
lk_id ASC
);

/*==============================================================*/
/* Index: good_like_FK                                          */
/*==============================================================*/
create index good_like_FK on "like" (
g_id ASC
);

/*==============================================================*/
/* Table: location                                              */
/*==============================================================*/
create or replace table location 
(
   l_id                 integer                        not null,
   l_city               varchar(1024)                  not null,
   l_address            varchar(1024)                  null,
   constraint PK_LOCATION primary key clustered (l_id)
);

/*==============================================================*/
/* Index: location_PK                                           */
/*==============================================================*/
create unique clustered index location_PK on location (
l_id ASC
);

/*==============================================================*/
/* Table: msg                                                   */
/*==============================================================*/
create or replace table msg 
(
   m_id                 integer                        not null,
   u_id                 integer                        null,
   o_id                 integer                        null,
   m_content            varchar(1024)                  null,
   m_category           varchar(1024)                  null,
   m_reply              varchar(1024)                  null,
   constraint PK_MSG primary key clustered (m_id)
);

/*==============================================================*/
/* Index: msg_PK                                                */
/*==============================================================*/
create unique clustered index msg_PK on msg (
m_id ASC
);

/*==============================================================*/
/* Index: user_msg_FK                                           */
/*==============================================================*/
create index user_msg_FK on msg (
u_id ASC
);

/*==============================================================*/
/* Index: msg_order_FK                                          */
/*==============================================================*/
create index msg_order_FK on msg (
o_id ASC
);

/*==============================================================*/
/* Table: "order"                                               */
/*==============================================================*/
create or replace table "order" 
(
   o_id                 integer                        not null,
   u_id                 integer                        null,
   g_id                 integer                        null,
   o_dealPrice          float                          not null,
   o_state              varchar(1024)                  not null,
   o_lastUpdate         timestamp                      not null,
   o_startTime          timestamp                      not null,
   constraint PK_ORDER primary key clustered (o_id)
);

/*==============================================================*/
/* Index: order_PK                                              */
/*==============================================================*/
create unique clustered index order_PK on "order" (
o_id ASC
);

/*==============================================================*/
/* Index: good_order_FK                                         */
/*==============================================================*/
create index good_order_FK on "order" (
g_id ASC
);

/*==============================================================*/
/* Index: user_order_FK                                         */
/*==============================================================*/
create index user_order_FK on "order" (
u_id ASC
);

/*==============================================================*/
/* Table: "user"                                                */
/*==============================================================*/
create or replace table "user" 
(
   u_username           varchar(1024)                  null,
   u_password           varchar(1024)                  null,
   u_id                 integer                        not null,
   l_id                 integer                        null,
   banned               smallint                       null,
   constraint PK_USER primary key clustered (u_id)
);

/*==============================================================*/
/* Index: user_PK                                               */
/*==============================================================*/
create unique clustered index user_PK on "user" (
u_id ASC
);

/*==============================================================*/
/* Index: user_location_FK                                      */
/*==============================================================*/
create index user_location_FK on "user" (
l_id ASC
);

/*==============================================================*/
/* View: viewGoods                                              */
/*==============================================================*/
create VIEW  viewGoods
 as
select g_id,g_name,c_name,g_price,g_description,g_purchaseData,g_postTime,g_state,g_old
from good,category
where good.c_id = category.c_id;

/*==============================================================*/
/* View: viewUser                                               */
/*==============================================================*/
create VIEW  viewUser
 as
select u_id,u_username,u_password,banned,location.l_id,l_city,l_address
from user,location
where location.l_id = user.l_id;

alter table cart
   add constraint FK_CART_GOOD_CART_GOOD foreign key (g_id)
      references good (g_id)
      on update restrict
      on delete restrict;

alter table good
   add constraint FK_GOOD_GOOD_CATE_CATEGORY foreign key (c_id)
      references category (c_id)
      on update restrict
      on delete restrict;

alter table good
   add constraint FK_GOOD_USER_GOOD_USER foreign key (u_id)
      references "user" (u_id)
      on update restrict
      on delete restrict;

alter table "like"
   add constraint FK_LIKE_GOOD_LIKE_GOOD foreign key (g_id)
      references good (g_id)
      on update restrict
      on delete restrict;

alter table msg
   add constraint FK_MSG_MSG_ORDER_ORDER foreign key (o_id)
      references "order" (o_id)
      on update restrict
      on delete restrict;

alter table msg
   add constraint FK_MSG_USER_MSG_USER foreign key (u_id)
      references "user" (u_id)
      on update restrict
      on delete restrict;

alter table "order"
   add constraint FK_ORDER_GOOD_ORDE_GOOD foreign key (g_id)
      references good (g_id)
      on update restrict
      on delete restrict;

alter table "order"
   add constraint FK_ORDER_USER_ORDE_USER foreign key (u_id)
      references "user" (u_id)
      on update restrict
      on delete restrict;

alter table "user"
   add constraint FK_USER_USER_LOCA_LOCATION foreign key (l_id)
      references location (l_id)
      on update restrict
      on delete restrict;


create procedure order_of_user(in p_username varchar)
begin
    select count(*)
    from user
    having username = p_username;
    group by o_id
end;


create trigger Student_BEFORE_UPDATE
    before update on order
    for each row
begin
update order
set lastUpdate = now()
where o_id = old.o_id;
end;

comment on trigger "order".State_BEFORE_UPDATE is 
'订单信息更新后，需要更新lastUpdate字段';

